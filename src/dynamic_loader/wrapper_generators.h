#pragma once

#include <string>
#include <typeindex>
#include <typeinfo>

#include "extern/va_opt.hpp"
#include "extern/map.h"

#define EMPTY()
#define DEFER(m) m EMPTY()

#define MAP_TUPLES0(f, x, peek, ...) f x MAP_NEXT(peek, MAP_TUPLES1)(f, peek, __VA_ARGS__)
#define MAP_TUPLES1(f, x, peek, ...) f x MAP_NEXT(peek, MAP_TUPLES0)(f, peek, __VA_ARGS__)
#define MAP_TUPLES(f, ...) MAP_TUPLES1(f, __VA_ARGS__, ()()(), ()()(), ()()(), 0)

#define MAP_LIST_TUPLES0(f, x, peek, ...) f x MAP_LIST_NEXT(peek, MAP_LIST_TUPLES1)(f, peek, __VA_ARGS__)
#define MAP_LIST_TUPLES1(f, x, peek, ...) f x MAP_LIST_NEXT(peek, MAP_LIST_TUPLES0)(f, peek, __VA_ARGS__)
#define MAP_LIST_TUPLES(f, ...) MAP_LIST_TUPLES1(f, __VA_ARGS__, ()()(), ()()(), ()()(), 0)

#define EXPAND(...) EXPAND4(EXPAND4(EXPAND4(EXPAND4(__VA_ARGS__))))
#define EXPAND4(...) EXPAND3(EXPAND3(EXPAND3(EXPAND3(__VA_ARGS__))))
#define EXPAND3(...) EXPAND2(EXPAND2(EXPAND2(EXPAND2(__VA_ARGS__))))
#define EXPAND2(...) EXPAND1(EXPAND1(EXPAND1(EXPAND1(__VA_ARGS__))))
#define EXPAND1(...) __VA_ARGS__

#define MAP_TUPLES_() MAP_TUPLES

#define DECLARATION(TYPE, NAME)\
TYPE NAME

#define FIRST(TYPE, NAME)\
TYPE

#define SECOND(TYPE, NAME)\
NAME

#define STRINGIFY2(X) #X
#define STRINGIFY(X) STRINGIFY2(X)

#define EXPAND_TUPLE(...) __VA_ARGS__
#define TYPENAME_LIST(...) DEFER(MAP_LIST_TUPLES_)()(typename, __VA_ARGS__)
#define TYPENAME_LIST_() TYPENAME_LIST

#define TEMPLATE_DEFINITION_EXPAND(TEMPLATE_LINE) IFN(TEMPLATE_LINE)(template <DEFER(TYPENAME_LIST_)()(TEMPLATE_LINE)>)
#define TEMPLATE_EXPAND(TEMPLATE_LINE) IFN(TEMPLATE_LINE)(<TEMPLATE_LINE>)

#define MAP_LIST_TUPLES_() MAP_LIST_TUPLES

#define GENERATE_FN(FN_NAME, TEMPLATE_LINE, RETURN_TYPE, ...)\
    TEMPLATE_DEFINITION_EXPAND(EXPAND_TUPLE TEMPLATE_LINE)\
    DEFER(MAP_LIST_TUPLES_)()(EXPAND_TUPLE, RETURN_TYPE) FN_NAME(DEFER(MAP_LIST_TUPLES_)()(DECLARATION, __VA_ARGS__)) {\
        DEFER(MAP_LIST_TUPLES_)()(EXPAND_TUPLE, RETURN_TYPE) (*fn)(DEFER(MAP_LIST_TUPLES_)()(FIRST, __VA_ARGS__));\
\
        if (functions[STRINGIFY(FN_NAME)].count(std::type_index(typeid(fn))) != 1) {\
\
            for (auto [id, d] : functions[STRINGIFY(FN_NAME)]) {\
                std::cout << id.name() << "\n";\
            }\
\
            std::cout << std::type_index(typeid(fn)).name() << " not found!\n";\
            return (DEFER(MAP_LIST_TUPLES_)()(EXPAND_TUPLE, RETURN_TYPE))(0);\
        }\
\
        fn = (DEFER(MAP_LIST_TUPLES_)()(EXPAND_TUPLE, RETURN_TYPE) (*)(DEFER(MAP_LIST_TUPLES_)()(FIRST, __VA_ARGS__)))functions[STRINGIFY(FN_NAME)][std::type_index(typeid(fn))];\
\
        return fn(DEFER(MAP_LIST_TUPLES_)()(SECOND, __VA_ARGS__));\
    }\

#define COMBINE(A, B) A##B

#define CREATE_WRAPPER(CLASS_NAME, ...) \
class COMBINE(CLASS_NAME, FunctionMapper) {\
private:\
    std::unordered_map<std::string, std::unordered_map<std::type_index, void*>> functions;\
public:\
    template <typename T>\
    void AddFunction(std::string name, T fn) {\
        functions[name][std::type_index(typeid(T))] = (void*)fn;\
    }\
\
\
DEFER(MAP_TUPLES_)()(GENERATE_FN, __VA_ARGS__)\
};

#define GENERATE_CLASS_WRAPPER_FN(FN_NAME, TEMPLATE_LINE, RETURN_TYPE, ...)\
    TEMPLATE_DEFINITION_EXPAND(EXPAND_TUPLE TEMPLATE_LINE)\
    static DEFER(MAP_LIST_TUPLES_)()(EXPAND_TUPLE, RETURN_TYPE) FN_NAME(DEFER(MAP_LIST_TUPLES_)()(DECLARATION, __VA_ARGS__)) {\
        return data->FN_NAME TEMPLATE_EXPAND(EXPAND_TUPLE TEMPLATE_LINE) (DEFER(MAP_LIST_TUPLES_)()(SECOND, __VA_ARGS__));\
    }\

#define CREATE_CLASS_WRAPPER(NAME, CLASS_NAME, ...) \
class COMBINE(NAME, ClassWrapper) {\
private:\
    static inline CLASS_NAME *data;\
public:\
    void SetData(CLASS_NAME *data) { this->data = data;}\
\
\
DEFER(MAP_TUPLES_)()(GENERATE_CLASS_WRAPPER_FN, __VA_ARGS__)\
};

#define CONTEXT_VAR_DEF(TYPE, NAME)\
COMBINE(TYPE, ClassWrapper) *NAME;

#define CONTEXT_ARG_DEF(TYPE, NAME)\
COMBINE(TYPE, ClassWrapper) *NAME

#define CONTEXT_CONSTRUCTOR_LIST_ITEM(TYPE, NAME)\
NAME(NAME)

#define CONTEXT_WRAPPER_CONSTRUCTOR_LIST(...) IFN(__VA_ARGS__)(DEFER(MAP_LIST_TUPLES_)()(CONTEXT_CONSTRUCTOR_LIST_ITEM, __VA_ARGS__))

#define CREATE_CONTEXT_WRAPPER(CONTEXT_NAME, ...)\
class CONTEXT_NAME {\
public:\
    DEFER(MAP_TUPLES_)()(CONTEXT_VAR_DEF, __VA_ARGS__)\
\
\
    CONTEXT_NAME (DEFER(MAP_LIST_TUPLES_)()(CONTEXT_ARG_DEF, __VA_ARGS__)) : CONTEXT_WRAPPER_CONSTRUCTOR_LIST(__VA_ARGS__) {\
    }\
};

#define TUPLE_TYPE_FUNCTION_MAPPER(TYPE, NAME)\
(COMBINE(TYPE, FunctionMapper), NAME)

#define ADD_M_PREFIX(TYPE, NAME)\
(TYPE, COMBINE(m_, NAME))

#define DYNAMIC_CONTEXT_PTR_VAR_DEF(TYPE, NAME)\
TYPE *NAME;

#define DYNAMIC_CONTEXT_PTR_ARG_DEF(TYPE, NAME)\
TYPE *NAME

#define DYNAMIC_CONTEXT_VAR_DEF(TYPE, NAME)\
TYPE NAME;

#define DYNAMIC_CONTEXT_ARG_DEF(TYPE, NAME)\
TYPE &NAME

#define DYNAMIC_CONTEXT_CONSTRUCTOR_LIST_ITEM(TYPE, NAME)\
COMBINE(m_, NAME)(NAME)

#define DYNAMIC_CONTEXT_CONSTRUCTOR_LIST_PTR_ITEM(TYPE, NAME)\
NAME(COMBINE(&m_, NAME))

#define DYNAMIC_CONTEXT_PTR_INITIALISATION(TYPE, NAME)\
NAME = COMBINE(&m_, NAME);

#define DYNAMIC_CONTEXT_CONSTRUCTOR_LIST_VAR(...) DEFER(MAP_LIST_TUPLES_)()(DYNAMIC_CONTEXT_CONSTRUCTOR_LIST_ITEM, __VA_ARGS__)

#define DYNAMIC_CONTEXT_CONSTRUCTOR_LIST_PTR(...) DEFER(MAP_LIST_TUPLES_)()(DYNAMIC_CONTEXT_CONSTRUCTOR_LIST_PTR_ITEM, __VA_ARGS__)

#define DYNAMIC_CONTEXT_CONSTRUCTOR_LIST(...) IFN(__VA_ARGS__)(: DYNAMIC_CONTEXT_CONSTRUCTOR_LIST_VAR(__VA_ARGS__), DYNAMIC_CONTEXT_CONSTRUCTOR_LIST_PTR(__VA_ARGS__))

#define DYNAMIC_CONTEXT_PTR_LIST_INITIALISATION(...) IFN(__VA_ARGS__)(DEFER(MAP_TUPLES_)()(DYNAMIC_CONTEXT_PTR_INITIALISATION, __VA_ARGS__))

#define CREATE_DYNAMIC_CONTEXT_(CONTEXT_NAME, SIMPLE_MEMBERS, ...)\
class CONTEXT_NAME {\
public:\
    DEFER(MAP_TUPLES_)()(DYNAMIC_CONTEXT_VAR_DEF, EVAL(DEFER(MAP_LIST_TUPLES_)()(ADD_M_PREFIX, __VA_ARGS__)))\
    DEFER(MAP_TUPLES_)()(DYNAMIC_CONTEXT_PTR_VAR_DEF, __VA_ARGS__)\
    IFN(EXPAND_TUPLE SIMPLE_MEMBERS)(DEFER(MAP_TUPLES_)()(DYNAMIC_CONTEXT_PTR_VAR_DEF, EXPAND_TUPLE SIMPLE_MEMBERS ))\
\
\
    CONTEXT_NAME (DEFER(MAP_LIST_TUPLES_)()(DYNAMIC_CONTEXT_ARG_DEF, __VA_ARGS__)\
    IFN(EXPAND_TUPLE SIMPLE_MEMBERS)(, DEFER(MAP_LIST_TUPLES_)()(DYNAMIC_CONTEXT_PTR_ARG_DEF, EXPAND_TUPLE SIMPLE_MEMBERS)))\
    DYNAMIC_CONTEXT_CONSTRUCTOR_LIST(__VA_ARGS__) IFN(EXPAND_TUPLE SIMPLE_MEMBERS)(, CONTEXT_CONSTRUCTOR_LIST_PTR(EXPAND_TUPLE SIMPLE_MEMBERS)) {\
    }\
\
    CONTEXT_NAME () {\
        DYNAMIC_CONTEXT_PTR_LIST_INITIALISATION(__VA_ARGS__)\
    }\
};

#define CREATE_DYNAMIC_CONTEXT(CONTEXT_NAME, SIMPLE_MEMBERS, ...)\
CREATE_DYNAMIC_CONTEXT_(CONTEXT_NAME, SIMPLE_MEMBERS, EVAL(DEFER(MAP_LIST_TUPLES_)()(TUPLE_TYPE_FUNCTION_MAPPER, __VA_ARGS__)))

#define CONTEXT_CONSTRUCTOR_LIST_PTR_ITEM(TYPE, NAME)\
NAME(NAME)

#define CONTEXT_CONSTRUCTOR_LIST_PTR(...) DEFER(MAP_LIST_TUPLES_)()(CONTEXT_CONSTRUCTOR_LIST_PTR_ITEM, __VA_ARGS__)

#define CONTEXT_CONSTRUCTOR_LIST(...) IFN(__VA_ARGS__)(: CONTEXT_CONSTRUCTOR_LIST_PTR(__VA_ARGS__))

#define CREATE_CONTEXT_(CONTEXT_NAME, ...)\
class CONTEXT_NAME {\
public:\
    DEFER(MAP_TUPLES_)()(DYNAMIC_CONTEXT_PTR_VAR_DEF, __VA_ARGS__)\
\
\
    CONTEXT_NAME (DEFER(MAP_LIST_TUPLES_)()(DYNAMIC_CONTEXT_PTR_ARG_DEF, __VA_ARGS__)) CONTEXT_CONSTRUCTOR_LIST(__VA_ARGS__) {\
    }\
\
};

#define CREATE_CONTEXT(CONTEXT_NAME, ...)\
CREATE_CONTEXT_(CONTEXT_NAME,  __VA_ARGS__)
